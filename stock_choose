stock_db = StockDB()
stock_db.renew()
stock_db.close()

#從資料庫中取得表格
stock_db = StockDB()
df_company = stock_db.get("公司")
df_daily = stock_db.get("日頻",psdate=True)
df_quarterly = stock_db.get("季頻",psdate=True)

#去除空值
df_company = df_company.dropna()
df_daily = df_daily.dropna()
df_quarterly = df_quarterly.dropna()

#檢視資料
display(df_company.head())
display(df_daily.head())
display(df_quarterly.head())

#請選出近一週漲幅最高的10檔股票
#請選出大市值股(前10%)且近期營收成長最高的10檔股票
#請選出半導體業且近期每股盈餘成長率最高的10檔股票
#請選出近一年股價淨值比最低的10檔股票
#請從近一個月成交量前10%的股票中找出日本益比最低的5檔不同的股票

#輸入使用者需求
user_msg = input("請輸入選股需求:")

#自動處理多個資料表並生成程式碼
history, code_str = six.ai_helper(user_msg)

#AI 自動選股 & 除錯
success = False
for _ in range(3):
    try:
        # 新建 df 表格
        df1 = df_company
        df2 = df_daily
        df3 = df_quarterly

        print(code_str)
        exec(code_str)
        new_df = calculate(df1, df2, df3)
        success = True
        break
    except Exception as e:
        print(f"AI 除錯中...")
        code_str = six.ai_debug(history, code_str, str(e))
        print(code_str)
        print("-------------------------")

if not success:
    print("請更換或重新輸入選股需求")
else:
    display(new_df)
    
#將選出來的股票給予趨勢報告，並給予簡單的評分
#建立股票清單
stock_list =new_df['股號'].tolist()
#設定儲存路徑
today_time = dt.date.today().strftime("%Y%m%d")
folder_name = "TrendReport"
os.makedirs(folder_name, exist_ok=True)

#建立多檔股票的趨勢報告並儲存
content = {}
for stock in stock_list:
  file_path = f"{folder_name}\\{stock}_{today_time}.txt"

  if os.path.exists(file_path):
    print(f"{stock} 檔案已存在")
  else:
    with open(file_path, "w", encoding="utf-8") as f:
      f.write(six.stock_gpt(stock_id=stock))

  with open(file_path, "r", encoding="utf-8") as f:
      content[stock] = f.read()
def stock_sort(data):
    scores = {}
    # 設定提示模板
    msg = [{
        "role": "system",
        "content":
        "你現在是一位專業的股票分析師, 會根據各股的專業趨勢分析報告去評斷\
         適不適合投資, 並給予0-100之間的評分。\n\
         以 50 分為基準, 有任何正面消息可以加分如:\n\
         股價整體上升、法人買超、營收成長上升、新聞有正面消息；\n\
         若有任何負面消息必須扣分如:\n\
         股價整體下降、法人賣超、營收成長下降、新聞有負面消息。\n\
         請將所有股票依照評分排序\n\
         最後只需要依照「股票代碼:評分分數」的格式列出。"
         
    }, {
        "role": "user",
        "content": str(data)
        
    }]
    reply_data = six.get_reply(msg)
    return reply_data      

scores_dict = {}
a = stock_sort(content)
def parse_stock_scores(str):
    #分割每一行
    lines = a.split('\n')
    
    #解析每一行
    for line in lines:
        if line.strip():
            parts = line.split(':')
            stock_code = parts[0].strip()
            score = int(parts[1].strip())
            scores_dict[stock_code] = score
    return scores_dict
scores_dict = parse_stock_scores(a)
print(scores_dict)

# 篩選超過多少分的股票
A = input('篩選超過幾分的股票:')
high_scores = [stock_code for stock_code, score in scores_dict.items() if score >= int(A)]

# 打印篩選後的高分股票
print(high_scores)
